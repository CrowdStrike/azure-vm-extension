name: Release

on:
  release:
    types: [published]

jobs:
  package:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Extract version from release tag
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        
        # Split version into components for handler version (major.minor)
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        HANDLER_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}"
        
        echo "full_version=$VERSION" >> $GITHUB_OUTPUT
        echo "handler_version=$HANDLER_VERSION" >> $GITHUB_OUTPUT
        
        echo "Full Version: $VERSION"
        echo "Handler Version: $HANDLER_VERSION"

    - name: Download latest falcon-installer binaries
      run: |
        echo "Downloading latest falcon-installer binaries from github.com/crowdstrike/falcon-installer..."
        
        # Get the latest release info to determine version for filename
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/crowdstrike/falcon-installer/releases/latest)
        FALCON_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name' | sed 's/^v//')
        echo "Latest falcon-installer release: v$FALCON_VERSION"
        
        # Download Linux binaries using the versioned filename format
        echo "Downloading Linux falcon-installer binaries..."
        curl --silent -L -o linux/handler/falcon-installer-x86_64 \
          "https://github.com/CrowdStrike/falcon-installer/releases/latest/download/falcon-installer-${FALCON_VERSION}-linux-x86_64"
        curl --silent -L -o linux/handler/falcon-installer-arm64 \
          "https://github.com/CrowdStrike/falcon-installer/releases/latest/download/falcon-installer-${FALCON_VERSION}-linux-arm64"
        
        # Download Windows binaries using the versioned filename format
        echo "Downloading Windows falcon-installer binaries..."
        curl --silent -L -o windows/handler/falcon-installer-x86_64.exe \
          "https://github.com/CrowdStrike/falcon-installer/releases/latest/download/falcon-installer-${FALCON_VERSION}-windows-x86_64.exe"
        curl --silent -L -o windows/handler/falcon-installer-arm64.exe \
          "https://github.com/CrowdStrike/falcon-installer/releases/latest/download/falcon-installer-${FALCON_VERSION}-windows-arm64.exe"
        
        # Make Linux binaries executable
        chmod +x linux/handler/falcon-installer-x86_64
        chmod +x linux/handler/falcon-installer-arm64
        chmod +x windows/handler/falcon-installer-x86_64.exe
        chmod +x windows/handler/falcon-installer-arm64.exe
        
        echo "Successfully downloaded falcon-installer binaries"

    - name: Update all version references
      run: |
        # Update handler script versions
        sed -i 's/readonly VERSION="[^"]*"/readonly VERSION="${{ steps.version.outputs.full_version }}"/g' linux/handler/helper.sh
        sed -i 's/\$VERSION = "[^"]*"/\$VERSION = "${{ steps.version.outputs.full_version }}"/g' windows/handler/helper.ps1
        
        # Update package manifest versions
        sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.full_version }}"/g' linux/package/Manifest.json
        sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.full_version }}"/g' windows/package/Manifest.json
        
        # Update bicep handler versions
        sed -i 's/param handlerVersion string = '\''[^'\'']*'\''/param handlerVersion string = '\''${{ steps.version.outputs.handler_version }}'\''/g' policy/falcon-subscription.bicep
        sed -i 's/param handlerVersion string = '\''[^'\'']*'\''/param handlerVersion string = '\''${{ steps.version.outputs.handler_version }}'\''/g' policy/falcon-managementgroup.bicep
        
        # Update bicep policy definition default values
        sed -i 's/defaultValue: '\''0\.0'\''/defaultValue: '\''${{ steps.version.outputs.handler_version }}'\''/g' policy/falcon-subscription.bicep
        sed -i 's/defaultValue: '\''0\.0'\''/defaultValue: '\''${{ steps.version.outputs.handler_version }}'\''/g' policy/falcon-managementgroup.bicep
        
        # Update ARM template handler versions
        sed -i 's/"extensionTypeHandlerVersion": "[^"]*"/"extensionTypeHandlerVersion": "${{ steps.version.outputs.handler_version }}"/g' linux/package/Artifacts/MainTemplate.json
        sed -i 's/"extensionTypeHandlerVersion": "[^"]*"/"extensionTypeHandlerVersion": "${{ steps.version.outputs.handler_version }}"/g' windows/package/Artifacts/MainTemplate.json
        
        echo "Updated all version references"

    - name: Generate deployment files
      run: |
        # Generate deployment JSON files for publishing the extension
        ./scripts/generate-deployment.sh --publish --version ${{ steps.version.outputs.full_version }} --platform all --template-file scripts/deploy.json.template --output-dir .

    - name: Create release packages
      run: |
        mkdir -p dist
        
        # Use generate-zip script for all packages (handler, UI, policy, and deployment)
        ./scripts/generate-zip.sh --publish --version ${{ steps.version.outputs.full_version }} --output-dir dist
        
    - name: Upload packages to release
      run: |
        gh release upload ${{ github.event.release.tag_name }} \
          dist/csfalcon-linux-handler-${{ steps.version.outputs.full_version }}.zip \
          dist/csfalcon-linux-ui-${{ steps.version.outputs.full_version }}.zip \
          dist/csfalcon-windows-handler-${{ steps.version.outputs.full_version }}.zip \
          dist/csfalcon-windows-ui-${{ steps.version.outputs.full_version }}.zip \
          dist/csfalcon-azure-policy-bicep.zip \
          dist/csfalcon-publish-extension-${{ steps.version.outputs.full_version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
